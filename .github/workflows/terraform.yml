name: 'Terraform'

on:
  workflow_dispatch:
    inputs:
      tf_action:
        description: 'Terraform Action Apply/Destroy'
        type: choice
        required: true
        options:
        - apply
        - destroy

jobs:
  create_s3_dynamodb:
    name: create s3 and dynamodb tables for tf
    if: inputs.tf_action == 'apply'
    runs-on: ubuntu-latest

    steps:
      - name: Set 8.8.8.8 as dns server
        run: |
          sudo sed -i 's/#DNS=/DNS=8.8.8.8 8.8.4.4/g' /etc/systemd/resolved.conf
          sudo systemctl daemon-reload
          sudo systemctl restart systemd-networkd
          sudo systemctl restart systemd-resolved

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Create s3 bucket for tfstate
        id: s3-bucket-create
        run: aws s3api create-bucket --bucket demo-us-east-2-azby --region us-east-2  --create-bucket-configuration LocationConstraint=us-east-2 2>&1 > /dev/null

      - name: Create dynamodb table for tfstate lock
        id: dynamodb-create
        run: aws dynamodb create-table --table-name "demo-us-east-2-azby" --attribute-definitions "AttributeName=LockID,AttributeType=S" --key-schema "AttributeName=LockID,KeyType=HASH" --provisioned-throughput "ReadCapacityUnits=5,WriteCapacityUnits=5"  2>&1 > /dev/null

  build_push:
    name: Build and Push Docker image for rest-api-in-k8s
    if: inputs.tf_action == 'apply'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Dockerhub login
        id: login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USR }}
          password: ${{ secrets.DOCKER_PWD }}

      - name: Docker build and push
        id: build
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ secrets.DOCKER_USR }}/rest-api-in-k8s:latest

  terraform_create:
    name: Run Terraform
    if: inputs.tf_action == 'apply'
    runs-on: ubuntu-latest
    needs: [create_s3_dynamodb]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ~1.4.6
          
      - name: Terraform Init
        id: tf-init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        id: tf-plan
        run: terraform plan -no-color
        working-directory: ./terraform

      - name: Terraform Run
        id: tf-run
        run: terraform ${{ inputs.tf_action }} -auto-approve
        working-directory: ./terraform

  terraform_destroy:
    name: Run Terraform
    if: inputs.tf_action == 'destroy'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ~1.4.6

      - name: Terraform Init
        id: tf-init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Run
        id: tf-run
        run: terraform ${{ inputs.tf_action }} -auto-approve
        working-directory: ./terraform

  destroy_s3_dynamodb:
    name: destroy s3 and dynamodb tables for tf
    if: inputs.tf_action == 'destroy'
    runs-on: ubuntu-latest
    needs: [terraform_destroy]

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Destroy dynamodb table for tfstate lock
        id: dynamodb-destroy
        run: aws dynamodb delete-table --table-name "demo-us-east-2-azby"  2>&1 > /dev/null

      - name: Destroy s3 bucket for tfstate
        id: s3-bucket-destroy
        run: aws s3 rb s3://demo-us-east-2-azby --force  2>&1 > /dev/null
